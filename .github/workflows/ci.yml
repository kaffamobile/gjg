name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  GO_VERSION: '1.22'
  JAVA_VERSION: '8'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for version info

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Install Wine
      run: |
        sudo apt-get update
        sudo apt-get install -y wine64
        # Configure Wine to reduce noise
        export WINEDEBUG=-all
        # Initialize Wine prefix
        wine64 wineboot --init
        echo "Wine version:"
        wine64 --version

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Verify environment
      run: make dev-setup

    - name: Run Go unit tests
      run: make test-go

    - name: Build launchers
      run: |
        make build-windows
        make build-windows-arm64

    - name: Build test artifacts
      run: |
        make build-stubs
        make build-testapp

    - name: Run integration tests (Wine)
      run: make test-integration

    - name: Run code quality checks
      run: |
        make fmt
        make vet
        # Check that fmt didn't change anything
        if [ -n "$(git status --porcelain)" ]; then
          echo "Code is not properly formatted"
          git diff
          exit 1
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gjg-launcher-binaries
        path: |
          bin/gjg-launcher.exe
          bin/gjg-launcher-arm64.exe
        retention-days: 7

  windows-test:
    name: Windows Native Test
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Build launcher
      run: |
        go build -o gjg-launcher.exe ./cmd/launcher

    - name: Build test Java app
      run: |
        cd testdata/java
        javac -source 8 -target 8 -d . TestApp.java
        mkdir -p testdata
        move TestApp.class testdata/
        echo Manifest-Version: 1.0 > manifest.txt
        echo Main-Class: testdata.TestApp >> manifest.txt
        echo. >> manifest.txt
        jar cfm testapp.jar manifest.txt testdata/TestApp.class

    - name: Test launcher functionality
      run: |
        # Create test config
        echo java_dir= > test.conf
        echo java_executable=java >> test.conf
        echo jar_file=testdata/java/testapp.jar >> test.conf
        echo jvm_args=-Xmx256m >> test.conf
        echo app_args=--test >> test.conf
        echo env_TEST_ENV=windows_test >> test.conf

        # Test dry run
        ./gjg-launcher.exe --gjg-dry-run

        # Test debug
        ./gjg-launcher.exe --gjg-debug

        # Test execution
        ./gjg-launcher.exe --windows-native

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif